var _user$project$FormBuilder_Fields_Autocomplete_View$elementView = F4(
	function (viewFun, onSelect, selected, choices) {
		var description = viewFun(choices);
		return A2(
			_elm_lang$html$Html$a,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					A2(
						_elm_lang$core$List$append,
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'padding', _1: '3px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '12px'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						_elm_lang$core$Native_Utils.eq(
							selected,
							_elm_lang$core$Maybe$Just(choices)) ? {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#28DBD2'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'color', _1: '#fff'},
								_1: {ctor: '[]'}
							}
						} : {ctor: '[]'})),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onMouseEnter(
						onSelect(choices)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(description),
				_1: {ctor: '[]'}
			});
	});
var _user$project$FormBuilder_Fields_Autocomplete_View$choicesView = F4(
	function (choices, viewFun, onSelect, selected) {
		return A2(
			_elm_lang$core$List$map,
			A3(_user$project$FormBuilder_Fields_Autocomplete_View$elementView, viewFun, onSelect, selected),
			choices);
	});
var _user$project$FormBuilder_Fields_Autocomplete_View$placeLabel = F4(
	function (viewFun, onSelect, selected, choices) {
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			_elm_lang$core$Native_Utils.eq(
				_elm_lang$core$List$length(
					_elm_lang$core$Tuple$second(choices)),
				0) ? {ctor: '[]'} : A2(
				_elm_lang$core$List$append,
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'padding', _1: '2px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'padding-left', _1: '6px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'display', _1: 'block'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#fbfbfb'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'font-size', _1: '80%'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border-bottom', _1: '1px solid #ddd'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'border-top', _1: '1px solid #ddd'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'color', _1: '#888'},
																	_1: {ctor: '[]'}
																}
															}
														}
													}
												}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								_elm_lang$core$Tuple$first(choices)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				A4(
					_user$project$FormBuilder_Fields_Autocomplete_View$choicesView,
					_elm_lang$core$Tuple$second(choices),
					viewFun,
					onSelect,
					selected)));
	});
var _user$project$FormBuilder_Fields_Autocomplete_View$display = F6(
	function (choices, choiceView, onSelect, searchQuery, attributes, commonAttrs) {
		var _p0 = attributes.event;
		if (_p0.ctor === 'Just') {
			var _p1 = attributes.placeholder;
			if (_p1.ctor === 'Nothing') {
				return _elm_lang$html$Html$text('');
			} else {
				return A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'position', _1: 'relative'},
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A3(
							_user$project$FormBuilder_FieldBuilder$inputField,
							_user$project$FormBuilder_FieldBuilder$Text,
							A2(
								_elm_lang$core$List$append,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$placeholder(_p1._0),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(_p0._0),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$autocomplete(false),
											_1: {ctor: '[]'}
										}
									}
								},
								commonAttrs),
							searchQuery),
						_1: {
							ctor: '::',
							_0: ((_elm_lang$core$Native_Utils.cmp(
								_elm_lang$core$String$length(searchQuery),
								5) < 0) || (!attributes.focused)) ? _elm_lang$html$Html$text('') : A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'border-bottom-left-radius', _1: '7px'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'border-bottom-right-radius', _1: '7px'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'overflow', _1: 'hidden'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid #ddd'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border-top', _1: 'none'},
															_1: {
																ctor: '::',
																_0: {ctor: '_Tuple2', _0: 'position', _1: 'absolute'},
																_1: {
																	ctor: '::',
																	_0: {ctor: '_Tuple2', _0: 'margin-top', _1: '-2px'},
																	_1: {
																		ctor: '::',
																		_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
																		_1: {
																			ctor: '::',
																			_0: {ctor: '_Tuple2', _0: 'background-color', _1: '#ffffff'},
																			_1: {ctor: '[]'}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}),
									_1: {ctor: '[]'}
								},
								A2(
									_elm_lang$core$List$map,
									A3(_user$project$FormBuilder_Fields_Autocomplete_View$placeLabel, choiceView, onSelect, attributes.selectedElement),
									choices)),
							_1: {ctor: '[]'}
						}
					});
			}
		} else {
			return _elm_lang$html$Html$text('');
		}
	});
var _user$project$FormBuilder_Fields_Autocomplete_View$inputField = F4(
	function (attributes, commonAttrs, name, val) {
		var _p2 = attributes.choiceView;
		if (_p2.ctor === 'Nothing') {
			return _elm_lang$html$Html$text('');
		} else {
			var _p3 = attributes.onSelect;
			if (_p3.ctor === 'Nothing') {
				return _elm_lang$html$Html$text('');
			} else {
				var _p4 = attributes.searchQuery;
				if (_p4.ctor === 'Nothing') {
					return _elm_lang$html$Html$text('');
				} else {
					return A6(
						_user$project$FormBuilder_Fields_Autocomplete_View$display,
						function () {
							var _p5 = attributes.choices;
							if (_p5.ctor === 'Nothing') {
								return {ctor: '[]'};
							} else {
								return _p5._0;
							}
						}(),
						_p2._0,
						_p3._0,
						_p4._0,
						attributes,
						commonAttrs);
				}
			}
		}
	});
var _user$project$FormBuilder_Fields_Autocomplete_View$defaultField = F2(
	function (recordName, view) {
		return A3(_user$project$FormBuilder_FieldBuilder$objectField, recordName, _user$project$FormBuilder_Fields_Autocomplete_Attributes$defaultFieldAttributes, view);
	});
