var _user$project$FormBuilder_Fields_Autocomplete$deselectElement = function (autocompleteModel) {
	return _elm_lang$core$Native_Utils.update(
		autocompleteModel,
		{selectedElement: _elm_lang$core$Maybe$Nothing});
};
var _user$project$FormBuilder_Fields_Autocomplete$selectedElement = function (autocompleteModel) {
	var _p0 = autocompleteModel.selectedElement;
	if (_p0.ctor === 'Nothing') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return A2(_elm_community$list_extra$List_Extra$getAt, _p0._0, autocompleteModel.elements);
	}
};
var _user$project$FormBuilder_Fields_Autocomplete$selectElement = F2(
	function (element, autocompleteModel) {
		return _elm_lang$core$Native_Utils.update(
			autocompleteModel,
			{
				selectedElement: A2(_elm_community$list_extra$List_Extra$elemIndex, element, autocompleteModel.elements)
			});
	});
var _user$project$FormBuilder_Fields_Autocomplete$changeSelectedElement = F2(
	function (autocompleteModel, offset) {
		var elementsSize = _elm_lang$core$List$length(autocompleteModel.elements);
		return _elm_lang$core$Native_Utils.update(
			autocompleteModel,
			{
				selectedElement: _elm_lang$core$Native_Utils.eq(elementsSize, 0) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(
					function () {
						var _p1 = autocompleteModel.selectedElement;
						if (_p1.ctor === 'Nothing') {
							return _elm_lang$core$Native_Utils.eq(offset, 1) ? 0 : (elementsSize - 1);
						} else {
							var _p2 = _p1._0;
							return (_elm_lang$core$Native_Utils.eq(_p2, 0) && _elm_lang$core$Native_Utils.eq(offset, -1)) ? 0 : ((_elm_lang$core$Native_Utils.eq(_p2, elementsSize - 1) && _elm_lang$core$Native_Utils.eq(offset, 1)) ? (elementsSize - 1) : (_p2 + offset));
						}
					}())
			});
	});
